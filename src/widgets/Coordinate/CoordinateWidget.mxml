<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:viewer="com.esri.viewer.*"
                   layout="horizontal"
                   widgetConfigLoaded="basewidget_widgetConfigLoadedHandler(event)">
    <fx:Script>
        <![CDATA[
			import com.esri.ags.events.ExtentEvent;
			import com.esri.ags.events.MapEvent;
			import com.esri.ags.events.ZoomEvent;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.utils.WebMercatorUtil;
			
			import mx.controls.Alert;
			import mx.effects.Resize;
			import mx.events.ResizeEvent;
			import mx.formatters.NumberBaseRoundType;
			import mx.utils.StringUtil;

            private var m_template:String;
            private var m_func:Function = substitute;
			private var outputUnit:String;
			private var m_primeiraCarga:Boolean = true;

			private var  north: String;
			private var  south: String;
			private var  east: String;
			private var  west: String;
			
            protected function basewidget_widgetConfigLoadedHandler(event:Event):void
            {
                if (configXML)
                {
                    const decimalSeparator:String = configXML.numberformatter.@decimalseparator;
                    numberFormatter.decimalSeparatorTo = decimalSeparator ? decimalSeparator : ".";
                    const thousandsSeparator:String = configXML.numberformatter.@thousandsseparator;
                    numberFormatter.thousandsSeparatorTo = thousandsSeparator ? thousandsSeparator : ",";
                    numberFormatter.useThousandsSeparator = configXML.numberformatter.@usethousandsseparator == "true";
                    numberFormatter.precision = parseFloat(configXML.numberformatter.@precision || "-1");
                    const rounding:String = configXML.numberformatter.@rounding;
                    numberFormatter.rounding = rounding ? rounding : NumberBaseRoundType.NONE;

                    const color:String = configXML.labelstyle.@color[0] || configXML.label.@color[0];
                    coords.setStyle("color", toNumber(color ? color : "0x000000"));
                    const fontFamily:String = configXML.labelstyle.@fontfamily[0] || configXML.label.@fontfamily[0];
                    coords.setStyle("fontFamily", fontFamily ? fontFamily : "Verdana");
                    const fontSize:String = configXML.labelstyle.@fontsize[0] || configXML.label.@fontsize[0];
                    coords.setStyle("fontSize", parseInt(fontSize ? fontSize : "9"));
                    const fontWeight:String = configXML.labelstyle.@fontweight[0] || configXML.label.@fontweight[0];
                    coords.setStyle("fontWeight", fontWeight ? fontWeight : "bold");	
					north = configXML.labels.northChar;
					south = configXML.labels.southChar;
					east = configXML.labels.eastChar;
					west = configXML.labels.westChar;
					
                    // If no template specified, show them with a space in between (except for special case below)
                    m_template = configXML.labels.template[0] || configXML.label.@template[0] || "{0} {1}";

                    if (map.loaded)
                    {
                        map_loadHandler(null);
                    }
                    else
                    {
                        map.addEventListener(MapEvent.LOAD, map_loadHandler);
                    }
					
					top = owner.height - 15;					
                }

                function map_loadHandler(event:MapEvent):void
                {
					map.removeEventListener(MapEvent.LOAD, map_loadHandler);
                    loadUnit();
                }				
            }

			private function loadUnit(): void
			{
				
				const wkid:int = map.spatialReference.wkid;
				m_func = substitute;
				if (m_primeiraCarga)
				{
					outputUnit = configXML.outputunit;
					m_primeiraCarga = false;
				}
				
				if (outputUnit === "mercator")
				{
					m_template = configXML.labels.template[0] || configXML.label.@template[0] || "{0} {1}";
					if (wkid === 4326 || wkid === 4269 || wkid === 4267)
					{
						m_func = geographicToMercator;
					}
				}
				else if (outputUnit === "geo")
				{
					m_template = configXML.labels.template[0] || configXML.label.@template[0] || getDefaultString("latitudeLabel") + ":{1}   " + getDefaultString("longitudeLabel") + ":{0}";
					m_func = mercatorToGeographic;
					
					if (wkid === 102100 || wkid === 102113 || wkid === 3857)
					{
						
						numberFormatter.precision = parseFloat(configXML.numberformatter.@precision || "6");
					}
					else if (wkid === 4326 || wkid === 4269 || wkid === 4267)
					{
						numberFormatter.precision = parseFloat(configXML.numberformatter.@precision || "6");
					}
				}
				else if (outputUnit === "dms")
				{
					m_template = configXML.labels.template[0] || configXML.label.@template[0] || "{0} {1}";					
					if (wkid === 102100 || wkid === 102113 || wkid === 3857)
					{
						m_func = mercatorToDMS;
					}
					else if (wkid === 4326 || wkid === 4269 || wkid === 4267)
					{
						m_func = mercatorToDMS;
					}
				}
				else if (outputUnit == "degrees")
				{
					m_func = mercatorToDegrees;
				}
				map.addEventListener(MouseEvent.MOUSE_MOVE, map_mouseMoveHandler);
				map.addEventListener(ExtentEvent.EXTENT_CHANGE,map_ExtentUpdateHandler,true,0,false);
			}
			
            private function toNumber(value:String):int
            {
                if (value.substr(0, 2) == "0x")
                {
                    return parseInt(value, 16);
                }
                return parseInt(value, 10);
            }

            private function mercatorToGeographic(web:MapPoint):String
            {
                const geo:MapPoint = WebMercatorUtil.webMercatorToGeographic(web) as MapPoint;
                return StringUtil.substitute(m_template,
                                             numberFormatter.format(geo.x),
                                             numberFormatter.format(geo.y));
            }

            private function mercatorToDMS(web:MapPoint):String
            {
                const geo:MapPoint = WebMercatorUtil.webMercatorToGeographic(web) as MapPoint;
                return StringUtil.substitute(m_template, DegToDMS.format(geo.x, DegToDMS.LON, north, south, west, east), DegToDMS.format(geo.y, DegToDMS.LAT, north, south, west, east));
            }
			
			private function mercatorToDegrees(web:MapPoint):String
			{
				const geo:MapPoint = WebMercatorUtil.webMercatorToGeographic(web) as MapPoint;
				return geo. x + " " + geo.y;
			}
			

            private function geographicToMercator(geo:MapPoint):String
            {
                const web:MapPoint = WebMercatorUtil.geographicToWebMercator(geo) as MapPoint;
                return StringUtil.substitute(m_template,
                                             numberFormatter.format(web.x),
                                             numberFormatter.format(web.y));
            }

            private function substitute(mapPoint:MapPoint):String
            {
                return StringUtil.substitute(m_template,
                                             numberFormatter.format(mapPoint.x),
                                             numberFormatter.format(mapPoint.y));
            }

            private function geographicToDMS(mapPoint:MapPoint):String
            {
                const x:String = DegToDMS.format(mapPoint.x, DegToDMS.LON, north, south, west, east);
                const y:String = DegToDMS.format(mapPoint.y, DegToDMS.LAT, north, south, west, east);
                return StringUtil.substitute(m_template, x, y);
            }

            private function map_mouseMoveHandler(event:MouseEvent):void
            {
                const mapPoint:MapPoint = map.toMapFromStage(event.stageX, event.stageY);
				var nf:NumberFormatter = new NumberFormatter();
				nf.useThousandsSeparator = true;
				nf.thousandsSeparatorTo = ".";
				nf.decimalSeparatorTo = ",";
				nf.thousandsSeparatorFrom = ".";
				nf.decimalSeparatorFrom = ",";
                coords.text = m_func(mapPoint);
            }
			
			private function updateScale(event:MouseEvent):void
			{
							}
			private function map_ExtentUpdateHandler(event:MouseEvent):void
			{
				callLater(function(event:MouseEvent):void{
					Alert.show("updateExtent","BDEP");
					
					const mapPoint:MapPoint = map.toMapFromStage(event.stageX, event.stageY);
					var nf:NumberFormatter = new NumberFormatter();
					nf.useThousandsSeparator = true;
					nf.thousandsSeparatorTo = ".";
					nf.decimalSeparatorTo = ",";
					nf.thousandsSeparatorFrom = ".";
					nf.decimalSeparatorFrom = ",";
					coords.text = m_func(mapPoint) + " Escala 1:" + nf.format(map.scale.toFixed(0));
				});
				
				
			}
			
			protected function coords_clickHandler(event:MouseEvent):void
			{
				var de:String = outputUnit;
				
				if (outputUnit == "geo")
				{					
					voltarParaMercator();
					"{0} {1}"
					outputUnit = "dms";					
					loadUnit();
					Alert.show(nomeUnidade(de) + " --->  " + nomeUnidade(outputUnit), configXML.labels.windowtitle);
				}
				else if (outputUnit == "dms")
				{
					outputUnit = "mercator";
					loadUnit();
					Alert.show(nomeUnidade(de) + " --->  " + nomeUnidade(outputUnit), configXML.labels.windowtitle);
				}	
				else if (outputUnit == "mercator")
				{				
					outputUnit = "geo";
					loadUnit();
					Alert.show(nomeUnidade(de) + " ---> " + nomeUnidade(outputUnit), configXML.labels.windowtitle);					
				}				
			}
			
			protected function nomeUnidade(sigla:String):String
			{
				var r:String = "";
				
				if (sigla == "geo")
					r = configXML.labels.geo;
				
				if (sigla == "dms")
					r = configXML.labels.dms;
				
				if (sigla == "mercator")
					r = configXML.labels.mercator;
				
				return r;
			}
			
			protected function voltarParaMercator():void
			{
				outputUnit = "dms";					
				loadUnit();
			}
		]]>
    </fx:Script>

    <fx:Declarations>
        <mx:NumberFormatter id="numberFormatter"/>
    </fx:Declarations>
    <viewer:filters>
        <mx:GlowFilter alpha="1"
                       blurX="3"
                       blurY="3"
                       color="0xFFFFFF"
                       strength="7"/>
    </viewer:filters>
    <s:Label id="coords" toolTip="Clique para mudar formato de exibição" useHandCursor="true" mouseChildren="false" buttonMode="true" enabled="true" color="0x000000" click="coords_clickHandler(event)"/>
</viewer:BaseWidget>
